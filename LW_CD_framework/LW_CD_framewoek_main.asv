

q = 5;  % Example image index
segma = 1;
alpha = 40;
eta = 0.5;
pyramid_depth = 3;
N_warps = 2; 
ite = 1;
displayFlow = 0; 
ffd = 30;
a = 1;
b = 14;
max_radius = 2;
scale = 0.5;

% Read the input images
folderPathA = 'F:\LW_CD\380\test\';
folderPathB = 'F:\LW_CD\380\test\';
folderPathGT = 'F:\LW_CD\380\test\';
I1im = imread(fullfile(folderPathA, 'A', [num2str(q) '.jpg']));
I2im = imread(fullfile(folderPathB, 'B', [num2str(q) '.jpg']));
im_gt = imread(fullfile(folderPathGT, 'LABEL', [num2str(q) '.jpg']));
tic
% Call the processing function
[BW] = LWCDProcessing(I1im, I2im, im_gt, q, segma, alpha, eta, pyramid_depth, N_warps, ite, displayFlow, ffd, a, b, max_radius, scale);

% Output the processing time
fprintf('Processing time: %.4f seconds\n', t1);

% Display the results
figure;
subplot(1,2,1); imshow(im_gt); title("Ground Truth");
subplot(1,2,2); imshow(BW); title("Processed Result");



% clear all;close all;
% %% LW-CD 
% %A weak CD framework tailored for low-illumination wide-field scenes. 
% % Firstly, a basic Gaussian filter is applied to address complex noise by reducing interference from light sources and sensors.
% % Subsequently, two feature enhancement algorithms are employed to tackle the issue of blurred features in the denoised regions.
% % The first algorithm enhances image brightness using the acoth function and constructs an inverse hyperbolic cotangent logarithmic ratio operator(IHCLRO) to perceive subtle changes in dark environments. 
% % The second algorithm leverages the improved multi-scale dense optical flow (IMDOF) to mitigate the impact of illumination variations and noise, generating a Difference Image (DI) from a fresh perspective. 
% % Following this, a Fractal Theory-based Self-similarity Weighted Fusion (FT-SWF) algorithm is utilized to integrate DIs containing different enhanced features. 
% % Finally, a simple thresholding-based denoising technique is applied to obtain the final change detection results.
% 
% %% 
% 
% q =5;
% %
% segma=1;
% alpha =40;
% eta = 0.5;
% pyramid_depth = 3;
% N_warps=2; 
% ite =1;
% displayFlow=0; 
% ffd=30;
% a=1;
% b=14;
% max_radius=2;
% scale=0.5;
% 
% 
% folderPathA = 'F:\LW_CD\380\test\';
% folderPathB = 'F:\LW_CD\380\test\';
% folderPathGT = 'F:\LW_CD\380\test\';
% resultCell = {};
% I1im = imread(fullfile(folderPathA, 'A', [num2str(q) '.jpg']));
% I2im = imread(fullfile(folderPathB, 'B', [num2str(q) '.jpg']));
% im_gt= imread(fullfile(folderPathGT, 'LABEL', [num2str(q) '.jpg']));
% I1res = imresize(I1im,[380 500]);
% I2res = imresize(I2im,[380 500]);
% im_gt = imresize(im_gt,[380 500]);
% %% 图像转为灰度图 不加亮度对比\
% tic
% if size(size(I1res), 2) == 3, im1 = double(rgb2gray(I1res)); end
% if size(size(I2res),2) == 3, im2 = double(rgb2gray(I2res)); end
% 
% %% 
% im1 = smoothImg(im1,segma); im2 = smoothImg(im2,segma);
% DI1 = ChangeDetectionFaction(im1, im2); 
% DI1=im2uint8(DI1);
% 
% %% 
% [u, v] = HS2_chebyshev(im1, im2, alpha, eta, pyramid_depth, N_warps, ite, displayFlow,im1);
% [x, y] = meshgrid(1:size(im2, 2), 1:size(im2, 1));
% imout =interp2(im2, x+u, y+v);
% imout(isnan(imout)) = 0;
% opout1=uint8(abs(imout-im1)); 
% opout=opout1;
% %% 
% fd1 = fractal_dimension(DI1,max_radius);
% fd2 =ffd*fd1;
% outDI1 = imcomplement(DI1);
% 
% %% 
% wight1=fd
% wight2=fd2;
% sigmoid_fusion = 1 ./ (1 + exp(-a * ( wight2.*double(opout)-wight1.*double(outDI1) - b)));
% sigmoid_fusion(sigmoid_fusion > 0.01) = 1;%
% BW0 = imbinarize(sigmoid_fusion); % 
% %% 
% BW = thresholdDenoising(BW0, scale, q);
% 
% toc
% t1=toc;
% 
% %% 
% im_gt=double((im_gt));
% im_gt(im_gt>=128)=255;
% im_gt(im_gt<128)=0;
% BW=im2double(BW);
% BW(BW>0)=255;
% BW(BW<=0)=0;
% [m,n]=size(BW);
% figure,
% subplot(121);imshow(im_gt);title("im_gt");
% subplot(122);imshow((BW));title("BW");
% fprintf(' ... ... Calculate various evaluation indexes ... ...\n');
% [FN,FP,OE,O,TP,TN]=PingJia_ture(BW,im_gt);
%  N=m*n;
%  PCC=O/N;
% P=TP/(TP + FP);
% R=TP/(TP + FN);
% F1_score=(2*P*R)/(P+R);
% F1_score(isnan(F1_score)==1) = 0;
% Po=PCC;
% Pe=(TN+FP)*(TN+FN)/(N*N)+(TP+FP)*(TP+FN)/(N*N);
% Kappa=(Po-Pe)/(1-Pe);
% FPR = FP/(FP+TN);  
% TPR = TP/(TP+FN);  
% t=t1;
% 



